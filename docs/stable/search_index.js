var documenterSearchIndex = {"docs":
[{"location":"reference/#Reference","page":"Reference","title":"Reference","text":"","category":"section"},{"location":"reference/#Types","page":"Reference","title":"Types","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"SinusoidalFunctionParameters\nSinusoidP\nSinusoidP(::Any, ::Any, ::Any, ::Any)\nSinusoidP(; ::Any, ::Any, ::Any, ::Any)\nSinusoidP(::Any)\nMixedLinearSinusoidP\nMixedLinearSinusoidP(::Any, ::Any, ::Any, ::Any, ::Any)\nMixedLinearSinusoidP(; ::Any, ::Any, ::Any, ::Any, ::Any)\nMixedLinearSinusoidP(::Any)\nSinusoidalRegressions.GenSinusoidP\nSinusoidalRegressions.DampedSinusoidP","category":"page"},{"location":"reference/#SinusoidalRegressions.SinusoidalFunctionParameters","page":"Reference","title":"SinusoidalRegressions.SinusoidalFunctionParameters","text":"SinusoidalFunctionParameters\n\nSupertype for the parameters of the different kinds of sinusoidal models supported by SinusoidalRegressions.\n\nSee also: SinusoidP, MixedLinearSinusoidP\n\n\n\n\n\n","category":"type"},{"location":"reference/#SinusoidalRegressions.SinusoidP","page":"Reference","title":"SinusoidalRegressions.SinusoidP","text":"SinusoidP{T <: Real} <: SinusoidalFunctionParameters\n\nParameters f, DC, Q and I of the sinusoidal function s(x) = DC + Icos(2πfx) + Qsin(2πfx).\n\nSee also: MixedLinearSinusoidP, GenSinusoidP (not yet implemented), DampedSinusoidP (not yet implemented).\n\n\n\n\n\n","category":"type"},{"location":"reference/#SinusoidalRegressions.SinusoidP-NTuple{4, Any}","page":"Reference","title":"SinusoidalRegressions.SinusoidP","text":"SinusoidP{T}(f, DC, Q, I)\n\nConstruct a SinusoidP{T} with the given parameters, promoting to a common type T if necessary.\n\nExample\n\njulia> SinusoidP(10, 1, -0.5, 1.2)\nSinusoidal parameters SinusoidP{Float64}:\n  Frequency (Hz)      : 10.0\n  DC                  : 1.0\n  Sine amplitude (Q)  : -0.5\n  Cosine amplitude (I): 1.2\n\n\n\n\n\n","category":"method"},{"location":"reference/#SinusoidalRegressions.SinusoidP-Tuple{}","page":"Reference","title":"SinusoidalRegressions.SinusoidP","text":"SinusoidP{T}(; f, DC, Q, I)\n\nConstruct a SinusoidP{T} specifying each parameter by name, promoting to a common type T if necessary.\n\nExample\n\njulia> SinusoidP(DC = 1, Q = -0.5, I = 1.2, f = 10)\nSinusoidal parameters SinusoidP{Float64}:\n  Frequency (Hz)      : 10.0\n  DC                  : 1.0\n  Sine amplitude (Q)  : -0.5\n  Cosine amplitude (I): 1.2\n\n\n\n\n\n","category":"method"},{"location":"reference/#SinusoidalRegressions.SinusoidP-Tuple{Any}","page":"Reference","title":"SinusoidalRegressions.SinusoidP","text":"(P::SinusoidP)(t)\n\nEvaluate the sinusoidal function specified by the parameters P at the values given by t, which may be a scalar or a collection.\n\nExample\n\njulia> P = SinusoidP(DC = 1, Q = -0.5, I = 1.2, f = 10)\njulia> t = range(0, 0.7, length = 5)\njulia> P(t)\n5-element Vector{Float64}:\n  2.2\n  1.4999999999999996\n -0.2000000000000004\n  0.49999999999999944\n  2.200000000000001\n\n\n\n\n\n","category":"method"},{"location":"reference/#SinusoidalRegressions.MixedLinearSinusoidP","page":"Reference","title":"SinusoidalRegressions.MixedLinearSinusoidP","text":"MixedLinearSinusoidP{T <: Real} <: SinusoidalFunctionParameters\n\nParameters f, DC, Q, I and m of the sinusoidal function s(x) = DC + mx + Icos(2πfx) + Qsin(2πfx).\n\nSee also: SinusoidP, GenSinusoidP (not yet implemented), DampedSinusoidP (not yet implemented).\n\n\n\n\n\n","category":"type"},{"location":"reference/#SinusoidalRegressions.MixedLinearSinusoidP-NTuple{5, Any}","page":"Reference","title":"SinusoidalRegressions.MixedLinearSinusoidP","text":"MixedLinearSinusoidP{T}(f, DC, Q, I, m)\n\nConstruct a MixedLinearSinusoidP{T} with the given parameters, promoting to a common type T if necessary.\n\nExample\n\njulia> MixedLinearSinusoidP(10, 0, -1.2, 0.4, 2.1)\nMixed Linear-Sinusoidal parameters MixedLinearSinusoidP{Float64}:\n  Frequency (Hz)       : 10.0\n  DC                   : 0.0\n  Sine amplitude (Q)   : -1.2\n  Cosine amplitude (I) : 0.4\n  Linear term (m)      : 2.1\n\n\n\n\n\n","category":"method"},{"location":"reference/#SinusoidalRegressions.MixedLinearSinusoidP-Tuple{}","page":"Reference","title":"SinusoidalRegressions.MixedLinearSinusoidP","text":"MixedLinearSinusoidP(; f, DC, Q, I, m)\n\nConstruct a MixedLinearSinusoidP{T} specifying each parameter by name.\n\nExample\n\njulia> MixedLinearSinusoidP(f = 10, DC = 0, m = 2.1, Q= -1.2, I = 0.4)\nMixed Linear-Sinusoidal parameters MixedLinearSinusoidP{Float64}:\n  Frequency (Hz)       : 10.0\n  DC                   : 0.0\n  Sine amplitude (Q)   : -1.2\n  Cosine amplitude (I) : 0.4\n  Linear term (m)      : 2.1\n\n\n\n\n\n","category":"method"},{"location":"reference/#SinusoidalRegressions.MixedLinearSinusoidP-Tuple{Any}","page":"Reference","title":"SinusoidalRegressions.MixedLinearSinusoidP","text":"(P::MixedLinearSinusoidP)(t)\n\nEvaluate the mixed linear-sinusoidal function specified by the parameters P at the values given by t, which may be a scalar or a collection.\n\nExample\n\njulia> P = MixedLinearSinusoidP(f = 10, DC = 0, m = 2.1, Q= -1.2, I = 0.4)\njulia> t = range(0, 0.7, length = 5)\njulia> P(t)\n5-element Vector{Float64}:\n  0.4\n  1.5674999999999997\n  0.3349999999999989\n -0.09750000000000014\n  1.870000000000002\n\n\n\n\n\n","category":"method"},{"location":"reference/#SinusoidalRegressions.GenSinusoidP","page":"Reference","title":"SinusoidalRegressions.GenSinusoidP","text":"GenSinusoidP <: SinusoidalFunctionParameters\n\nNot yet implemented.\n\nSee also: SinusoidP, MixedLinearSinusoidP, DampedSinusoidP (not yet implemented).\n\n\n\n\n\n","category":"type"},{"location":"reference/#SinusoidalRegressions.DampedSinusoidP","page":"Reference","title":"SinusoidalRegressions.DampedSinusoidP","text":"DampedSinusoidP <: SinusoidalFunctionParameters\n\nNot yet implemented.\n\nSee also: SinusoidP, MixedLinearSinusoidP, GenSinusoidP (not yet implemented).\n\n\n\n\n\n","category":"type"},{"location":"reference/#IEEE-1057","page":"Reference","title":"IEEE 1057","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"Sinusoidal regressions specified by 1057-2017, IEEE Standard for Digitizing Waveform Recorders. These are the same algorithms specified in 1241-2010, IEEE Standard for Terminology and Test Methods for Analog-to-Digital Converters.","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"ieee1057","category":"page"},{"location":"reference/#SinusoidalRegressions.ieee1057","page":"Reference","title":"SinusoidalRegressions.ieee1057","text":"ieee1057(X, Y, f::Real) :: SinusoidP\n\nCalculate a three-parameter sinusoidal fit of the independent variables X and dependent variables Y, using the algorithm described by the IEEE 1057 Standard. Argument f is the exact frequency of the sinusoid, in hertz.\n\nThe data is fit to the model f(x DC Q I) = DC + Qsin(2πfx) + Icos(2πfx).\n\nSee also SinusoidP.\n\n\n\n\n\nieee1057(X, Y ; f = nothing, iterations = 6) :: SinusoidP\n\nCalculate a four-parameter sinusoidal fit of the independent variables X and dependent variables Y, using the algorithm described by the IEEE 1057 Standard.\n\nArgument f is an estimate of the frequency, in hertz. If not provided, then it is calculated using the integral equations method (see sinfit_j).\n\nArgument iterations specifies how many iterations to run. The default value is 6, which is the value recommended by the standard.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Method-of-integral-equations","page":"Reference","title":"Method of integral equations","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"Four types of sinusoidal regressions using the algorithms proposed by J. Jacquelin in \"Régressions et Equations Intégrales\". These algorithms are not iterative, and they do not require an initial estimate of the frequency or any other parameter. They may be used by themselves, or to calculate initial estimates for more-precise least-squares methods based on non-linear optimization (described below).","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"sinfit_j\nmixlinsinfit_j","category":"page"},{"location":"reference/#SinusoidalRegressions.sinfit_j","page":"Reference","title":"SinusoidalRegressions.sinfit_j","text":"sinfit_j(X, Y) :: SinusoidP\n\nPerform a four-parameter sinusoidal fit of the independent variables X and dependent variables Y, using the method of integral equations described in J. Jacquelin, \"Régressions et équations intégrales\", 2014 (available at https://fr.scribd.com/doc/14674814/Regressions-et-equations-integrales)\n\nThe data is fit to the model s(x f DC Q I) = DC + Qsin(2πfx) + Icos(2πfx). No initial guess as to the values of the parameters f, DC, Q, or I is required. The values in X must be sorted in ascending order.\n\nSee also SinusoidP.\n\n\n\n\n\n","category":"function"},{"location":"reference/#SinusoidalRegressions.mixlinsinfit_j","page":"Reference","title":"SinusoidalRegressions.mixlinsinfit_j","text":"mixlinsinfit_j(X, Y) :: MixedLinearSinusoidP\n\nPerform a mixed linear-sinusoidal fit of the independent variables X and dependent variables Y, using the method of integral equations.\n\nThe data is fit to the model s(x f DC Q I m) = DC + mx + Qsin(2πfx) + Isin(2πfx). No initial guess as to the values of the parameters f, DC, Q, I, or m is required. The values in X must be sorted in ascending order.\n\nSee also sinfit_j\n\n\n\n\n\n","category":"function"},{"location":"reference/#Non-linear-optimization","page":"Reference","title":"Non-linear optimization","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"Wrappers for LsqFit.curve_fit(), which define the appropriate model, calculate initial parameter estimates if not provided by the user, and wrap the returned fit in the appropriate subtype of SinusoidalFunctionParameters.","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"sinfit\nmixlinsinfit","category":"page"},{"location":"reference/#SinusoidalRegressions.sinfit","page":"Reference","title":"SinusoidalRegressions.sinfit","text":"sinfit(X, Y, guess::SinusoidP = sinfit_j(X, Y) ; kwargs...)\n\nPerform a four-parameter least-squares sinusoidal fit of the independent variables X and dependent variables Y, using the non-linear optimization solver from LsqFit.jl.\n\nThe data is fit to the model s(x f DC Q I) = DC + Qsin(2πfx) + Icos(2πfx). The values in X must be sorted in ascending order.\n\nThe Levenberg-Marquardt algorithm used by LsqFit.jl requires an initial guess of the parameters f, DC, Q and I. If no initial guess is provided, then one is calculated using sinfit_j.\n\nAll keyword arguments provided are directly passed to LsqFit.curve_fit.\n\nSee also SinusoidP, sinfit_j, LsqFit.jl, curve_fit\n\n\n\n\n\nsinfit(X, Y, f ; kwargs...)\n\nPerform a three-parameter least-squares sinusoidal fit of the independent variables X and dependent variables Y, assuming a known frequency f, using the non-linear optimization solver from LsqFit.jl.\n\nThe data is fit to the model s(x DC Q I) = DC + Qsin(2πfx) + Icos(2πfx). The values in X must be sorted in ascending order.\n\nThe Levenberg-Marquardt algorithm used by LsqFit.jl requires an initial guess of the parameters, DC, Q and I. If no initial guess is provided, then one is calculated using the linear regression algorithm from IEEE 1057 (see ieee1057).\n\nAll keyword arguments provided are directly passed to LsqFit.curve_fit.\n\nSee also SinusoidP, ieee1057, curve_fit.\n\n\n\n\n\n","category":"function"},{"location":"reference/#SinusoidalRegressions.mixlinsinfit","page":"Reference","title":"SinusoidalRegressions.mixlinsinfit","text":"mixlinsinfit(X, Y, guess::MixedLinearSinusoidP = mixlinsinfit_j(X, Y) ; kwargs...)\n\nPerform a least-squares mixed linear-sinusoid fit of the independent variables X and dependent variables Y,  using the non-linear optimization solver from LsqFit.jl.\n\nThe data is fit to the model s(x f DC Q I m) = DC + Qsin(2πfx) + Icos(2πfx) + mx. The values in X must be sorted in axcending order.\n\nThe Levenberg-Marquardt algorithm used by LsqFit.jl requires an initial guess of the parameters, DC, Q I, and m. If no initial guess is provided, then one is calculated then one is calculated using mixlinsinfit_j.\n\nAll keyword arguments provided are directly passed to LsqFit.curve_fit.\n\nSee also MixedLinearSinusoidP, mixlinsinfit_j, curve_fit.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Error-measurement","page":"Reference","title":"Error measurement","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"Functions to easily compare a calculated fit to actual data, using root mean-square errors, or mean absolute errors.","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"rmse\nmae","category":"page"},{"location":"reference/#SinusoidalRegressions.rmse","page":"Reference","title":"SinusoidalRegressions.rmse","text":"rmse(fit::T, exact::T, x) where {T <: SinusoidalFunctionParameters}\n\nCalculate the root mean-square error between fit and exact sampled at collection x.\n\nSee also: mae\n\n\n\n\n\n","category":"function"},{"location":"reference/#SinusoidalRegressions.mae","page":"Reference","title":"SinusoidalRegressions.mae","text":"mae(fit::T, exact::T, x) where {T <: SinusoidalFunctionParameters}\n\nCalculate the mean absolute error between fit and exact sampled at collection x.\n\nSee also: rmse\n\n\n\n\n\n","category":"function"},{"location":"reference/#Plotting","page":"Reference","title":"Plotting","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"This package provides recipes for Plots.jl. This makes it very easy to plot data and the calculated fit.","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"There are two recipes included: plotting one fit, and plotting data and up to two fits.","category":"page"},{"location":"reference/#Plotting-a-fit","page":"Reference","title":"Plotting a fit","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"plot(X, fit::T, ; fitlabel = \"\") where {T <: SinusoidalFunctionParameters}","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"Plot the model with parameters given by fit at the points specified in collection X. The optional keyword argument fitlabel controls the label (legend) of the plot.","category":"page"},{"location":"reference/#Example","page":"Reference","title":"Example","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"using SinusoidalRegressions\nusing Random: seed! # hide\nusing Plots # hide\nseed!(5678) # hide\nX = range(0, 1, length = 100)\nY = 2 .+ 3cos.(2*pi*5*X) .- 0.2sin.(2*pi*5*X) .+ 0.1*randn(100)\nfit = ieee1057(X, Y, 5)\nplot(X, fit, fitlabel = \"example\")","category":"page"},{"location":"reference/#Plotting-data-and-one-or-two-different-fits","page":"Reference","title":"Plotting data and one or two different fits","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"plot(X, Y, fit::T ; exact :: Union{T, Nothing} = nothing,\n                    samples    = 100,\n                    fitlabel   = \"fit\",\n                    datalabel  = \"data\",\n                    exactlabel = \"exact\") where {T <: SinusoidalFunctionParameters}","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"Plot the data Y and the model with parameters given by fit evaluated at the points specified in the collection X. The following keyword arguments are supported (with default values in parenthesis):","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"exact::T = nothing: add one more model to the plot. This allows plotting the exact function, the data and the fit in a single plot.\nsamples::Int = 100: fit and exact are evaluated for range(first(X), last(X), length = samples).\nfitlabel::String = \"fit\": the label (legend) for the fit plot.\ndatalabel::String = \"data\": the label for the data plot.\nexactlabel::String = \"exact\": the label for the exact plot.","category":"page"},{"location":"reference/#Example-2","page":"Reference","title":"Example","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"X = range(0, 1, length = 20)\nexact = SinusoidP(5, 2, -0.2, 3)\nY = exact.(X) .+ 0.3*randn(20)\nfit = sinfit(X, Y)\nplot(X, Y, fit, exact = exact,\n     datalabel = \"measurements\",\n     fitlabel = \"NLS\",\n     exactlabel = \"true\")","category":"page"},{"location":"#Introduction","page":"Introduction","title":"Introduction","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"SinusoidalRegressions.jl aims to provide a set of functions for conveniently fitting noisy data to a variety of sinusoidal models, with or without initial estimates of the parameters.","category":"page"},{"location":"#Features","page":"Introduction","title":"Features","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"This package supports five sinusoidal models:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"3-parameter sinusoidal, where the frequency f is known exactly:\ns_s(x textrmDC I Q) = textrmDC + Qsin(2πfx) + Icos(2πfx)\n4-parameter sinusoidal, where the frequency f is unknown:\ns_s(x f textrmDC I Q) = textrmDC + Qsin(2πfx) + Icos(2πfx)\nMixed linear-sinusoidal:\ns_mls(x f textrmDC I Q m) = textrmDC + mx + Qsin(2πfx) + Icos(2πfx)\n(Not yet implemented) General sinusoidal with unknown coefficients λ_1 λ_2 ldots λ_m, and known functions g_1(x) g_2(x) ldots g_m(x):\ns_g(x f I Q λ_n) = Qsin(2πfx) + Icos(2πfx) + λ_1g_1(x) + ldots + λ_mg_m(x)\n(Not yet implemented) Damped sinusoidal:\ns_d(x f I Q α) = exp(αx) ( Qsin(2πfx) + Icos(2πfx) )","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"note: A note on the frequency\nThe frequency f is assumed to be expressed in hertz throughout.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Three types of sinusoidal fitting algorithms are provided:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"IEEE 1057 3-parameter and 4-parameter algorithms. These are able to fit only the sinusoidal model s_s(x). The 4-parameter version requires a very close estimate of the frequency f and dense sampling of several periods of the sinusoid.\nThe algorithms proposed by J. Jacquelin, based on the idea of finding an integral equation whose solution is the desired sinusoidal model. This integral equation is linear and can be solved using linear least-squares. These algorithms have several benefits:\nThey are non-iterative.\nThey do not require initial estimates of any of the model's parameters.\nThey often perform quite well, but may also be used to calculate a good initial guess for the more powerful non-linear methods described below.\nThe non-linear fitting function curve_fit from the package LsqFit. This function uses the Levenberg-Marquardt algorithm and is quite powerful, but it requires an initial estimate of the parameters. This package \"wraps\" curve_fit, automatically defining the correct model and calculating initial parameter estimates (using IEEE 1057 or Jacquelin's algorithms, as appropriate) if none are provided by the user.","category":"page"},{"location":"#Installation","page":"Introduction","title":"Installation","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"This package is in Julia's general registry. It can be installed by running","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"using Pkg; Pkg.add(\"SinusoidalRegressions)","category":"page"},{"location":"#Roadmap-and-Contributions","page":"Introduction","title":"Roadmap and Contributions","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"The following features are on the roadmap towards version 1.0:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Implement Jacquelin's algorithms for damped and general sinusoids.\nEnhance the front-end to curve_fit by allowing some paramters to be declared as known a priori, and  fitting only the remaining parameters.\nImplement other algorithms and add support for other models, as suggested by the community.\nImprove tests.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Contributions, feature requests, bug reports and suggestions are welcome; please use the issue tracker on github, or open a discussion on the Julia forums.","category":"page"},{"location":"#Tutorial","page":"Introduction","title":"Tutorial","text":"","category":"section"},{"location":"#Fitting-experimental-data","page":"Introduction","title":"Fitting experimental data","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Let us fit noisy data to a mixed linear-sinusoidal model using Jacquelin's integral equation algorithm. The model is","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"s(x) = textrmDC + mx + Qsin(2πfx) + Icos(2πfx)","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"with parameters f (the frequency is unknown), textrmDC, Q, I and m.","category":"page"},{"location":"#Types","page":"Introduction","title":"Types","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"This package includes several types used to store the parameters of the different models:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"SinusoidP for representing sinusoidal models s_s(x).\nMixedLinearSinusoidP for representing mixed sinusoidal models s_mls(x).\nSinusoidalRegressions.GenSinusoidP for representing general sinusoidal models s_g(x) (not yet implemented).\nSinusoidalRegressions.DampedSinusoidP for representing damped sinusoidal models s_d(x).","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"All of these types are subtypes of the abstract type SinusoidalFunctionParameters. ","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Instances of these types are also function types (functors), making it easy to evaluate the model at any point (or collection of points). A plot recipe is also provided. We will use both of these features below.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Since we're assuming a mixed linear-sinusoidal model, we'll use the type MixedLinearSinusoidP.","category":"page"},{"location":"#Generating-the-data","page":"Introduction","title":"Generating the data","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"We will first generate the \"true\" or exact data, and then add noise. As a second step, we'll fit the noisy data and compare the fit to the exact model.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"The exact parameters are f = 41, textrmDC = 02, m = 1, Q = -075, and I = 08. We define the model as follows:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"using SinusoidalRegressions\np_exact = MixedLinearSinusoidP(f = 4.1, DC = 0.2, m = 1, Q = -0.75, I = 0.8)","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"We now genereate 40 \"exact\" data points with a sampling rate of 40 Hz.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"x = range(0, length = 40, step = 1/40)\nd_exact = p_exact(x)  # exact data\nnothing # hide","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"And finally, we add gaussian noise to the data:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"using Random: seed!\nseed!(6778899)\n\ndata = d_exact .+ 0.2*randn(40)  # noisy data\nnothing # hide","category":"page"},{"location":"#Fitting-and-error-measurement","page":"Introduction","title":"Fitting and error measurement","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"The vector data is assumed to contain the experimental or measured data, which we wish to fit to the mixed linear-sinusoidal model. We do so as follows:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"fit = mixlinsinfit_j(x, data)","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"We calculate the fit's root mean-square error and mean absolute error:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"rmse(fit, p_exact, x)","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"mae(fit, p_exact, x)","category":"page"},{"location":"#Plotting","page":"Introduction","title":"Plotting","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Plotting the measured data along with the fit:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"using Plots\nplot(x, data, fit)","category":"page"},{"location":"#Improving-the-fit-with-non-linear-least-squares","page":"Introduction","title":"Improving the fit with non-linear least squares","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"We may try to improve the fit by using LsqFit.curve_fit with the parameters estimated above. The function mixlinsinfit calls LsqFit.curve_fit behind the scenes, setting up the model and calculating the initial parameter estimates (using mixlinsinfit_j) if none are provided.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"fit_nls = mixlinsinfit(x, data)","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"rmse(fit_nls, p_exact, x)","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"mae(fit_nls, p_exact, x)","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"As expected, this second fit has a smaller error. Plotting the data, the fit, and the exact function for comparison:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"plot(x, data, fit_nls, exact = p_exact)","category":"page"},{"location":"#A-more-difficult-scenario","page":"Introduction","title":"A more difficult scenario","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Let us fit the same model as above, with fewer data points, more noise and non-equidistant samples.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"x = sort(rand(20))\nd_exact = p_exact(x)\ndata = d_exact .+ 0.3*randn(20)\nfit = mixlinsinfit_j(x, data)    # using Jacquelin's algorithm","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Error for Jacquelin's algorithm:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"rmse(fit, p_exact, x)","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"mae(fit, p_exact, x)","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"As expected, we see larger errors than in the more benign scenario above. Let us improve the fit using non-linear least-squares. Here, fit (calculated above) is explicitly given as an initial guess:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"fit_nls = mixlinsinfit(x, data, fit)","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Error for LsqFit.curve_fit:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"rmse(fit_nls, p_exact, x)","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"mae(fit_nls, p_exact, x)","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"We see that LsqFit.curve_fit was able to improve the fit significantly. Plotting the data, the fit and the exact function:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"plot(x, data, fit_nls, exact = p_exact)","category":"page"},{"location":"#References","page":"Introduction","title":"References","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Jacquelin J., Régressions et Equations Intégrales, 2014, (online) https://fr.scribd.com/doc/14674814/Regressions-et-equations-integrales.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"IEEE, \"IEEE Standard for Digitizing Waveform Recorders\", 2018.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Levenberg, K., \"A Method for the Solution of Certain Non-Linear Problems in Least Squares\", Quarterly of Applied Mathematics, 2 (2), 1944. doi:10.1090/qam/10666.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Marquardt, D., \"An Algorithm for Least-Squares Estimation of Nonlinear Parameters\", SIAM Journal on Applied Mathematics, 11 (2), 1944. doi:10.1137/0111030.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"LsqFit.jl User Manual, (online) https://julianlsolvers.github.io/LsqFit.jl/latest/","category":"page"}]
}
