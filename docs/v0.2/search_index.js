var documenterSearchIndex = {"docs":
[{"location":"reference/#Reference","page":"Reference","title":"Reference","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"This package's workhorse function is sinfit(p::SRProblem, a::SRAlgorithm). It takes a problem p and calculates a fit using algorithm a.","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"sinfit","category":"page"},{"location":"reference/#SinusoidalRegressions.sinfit","page":"Reference","title":"SinusoidalRegressions.sinfit","text":"sinfit(problem::SRProblem, algorithm::SRAlgorithm)\n\nCalculate a sinosoidal regression on problem using algorithm.\n\nCurrently supported problem types are:\n\nSin3Problem – three-parameter sinusoidal regression\nSin4Problem – four-parameter sinusoidal regression\nMixedLinSin4Problem – four-parameter mixed linear and sinusoidal regression\nMixedLinSin5Problem – five-parameter mixed linear and sinusoidal regression\n\nCurrently supported algorithms are:\n\nIEEE1057\nIntegralEquations\nLevMar\nLiang\n\nExample\n\njulia> using SinusoidalRegressions\njulia> t = collect(range(0, 1, length = 100))         # time instants\njulia> s = sin.(2*pi*15*t .+ pi/4) .+ 0.1*randn(100)  # noisy samples\njulia> p = Sin3Problem(t, s, 15)                      # define regression problem\njulia> sinfit(p, IEEE1057())                          # calculate fit with IEEE 1057\n3-Parameter Sinusoidal Problem Sin3Problem:\n  X                    : Vector{Float64} with 100 elements\n  Y                    : Vector{Float64} with 100 elements\n  Frequency (Hz)       : 15\nParameter estimates:\n  DC                   : missing\n  Sine amplitude (Q)   : missing\n  Cosine amplitude (I) : missing\n  Lower bounds         : missing\n  Upper bounds         : missing\n\nSee the documentation for more details.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Algorithms","page":"Reference","title":"Algorithms","text":"","category":"section"},{"location":"reference/#IEEE-1057","page":"Reference","title":"IEEE 1057","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"Sinusoidal regressions specified by 1057-2017, IEEE Standard for Digitizing Waveform Recorders. These are the same algorithms specified in 1241-2010, IEEE Standard for Terminology and Test Methods for Analog-to-Digital Converters.","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"IEEE1057","category":"page"},{"location":"reference/#SinusoidalRegressions.IEEE1057","page":"Reference","title":"SinusoidalRegressions.IEEE1057","text":"IEEE1057([iterations = 6]) <: SRAlgorithm\n\nDefine an instance of the IEEE 1057 sinusoidal fitting algorithm.\n\nOptional argument iterations specifies how many iterations to run before the algorithm stops. The default value is 6, which is the value recommended by the standard. This value is only used when calculating a 4-parameter fit.\n\n\n\n\n\n","category":"type"},{"location":"reference/#Method-of-integral-equations","page":"Reference","title":"Method of integral equations","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"Four types of sinusoidal regressions using the algorithms proposed by J. Jacquelin in \"Régressions et Equations Intégrales\". These algorithms are not iterative, and they do not require an initial estimate of the frequency or any other parameter. They may be used by themselves, or to calculate initial estimates for more-precise least-squares methods based on non-linear optimization (described below).","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"IntegralEquations","category":"page"},{"location":"reference/#SinusoidalRegressions.IntegralEquations","page":"Reference","title":"SinusoidalRegressions.IntegralEquations","text":"IntegralEquations() <: SRAlgorithm\n\nDefine an instance of the integral-equations sinusoidal fitting algorithm described by J.  Jacquelin in \"Régressions et équations intégrales\", 2014 (available at https://fr.scribd.com/doc/14674814/Regressions-et-equations-integrales).\n\nThis algorithm does not accept any configuration parameters.\n\n\n\n\n\n","category":"type"},{"location":"reference/#Non-linear-optimization","page":"Reference","title":"Non-linear optimization","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"Wrapper for LsqFit.curve_fit(), which defines the appropriate model, calculates initial parameter estimates if not provided by the user, and wraps the returned fit in the appropriate parameter container.","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"LevMar","category":"page"},{"location":"reference/#SinusoidalRegressions.LevMar","page":"Reference","title":"SinusoidalRegressions.LevMar","text":"LevMar([use_ga = false]) <: SRAlgorithm\n\nDefine an instance of the Levenberg-Marquardt sinusoidal fitting algorithm.\n\nIf the optional argument use_ga is set to true, the algorithm will use geodesic acceleration to potentially improve its performance and accuracy. See curve_fit for more details.\n\n\n\n\n\n","category":"type"},{"location":"reference/#Liang","page":"Reference","title":"Liang","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"Algorithm designed for fitting when only a fraction of a period is sampled.","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"Liang","category":"page"},{"location":"reference/#SinusoidalRegressions.Liang","page":"Reference","title":"SinusoidalRegressions.Liang","text":"Liang([threshold = 0.15, iterations = 100, q = 1e-5]) <: SRAlgorithm\n\nDefine an instance of the sinusoidal fitting algorithm described in Liang et al, \"Fitting Algorithm of Sine Wave with Partial Period Waveforms and Non-Uniform Sampling Based on Least-Square Method.\" Journal of Physics: Conference Series 1149.1 (2018)ProQuest. Web. 17 Apr. 2023.\n\nThis algorithm is designed for scenarios where only a fraction of a period of the sinusoid has been sampled. Its optional parameters threshold and q are described in the paper. Additionally, a maximum number of iterations may be specified in iterations.\n\n\n\n\n\n","category":"type"},{"location":"reference/#Problems","page":"Reference","title":"Problems","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"An SRProblem encapsulates what is known: at a minimum, the sampling times and the samples, and possibly also estimates or bounds on some or all parameters. The problem type specifies the number of unknown parameters, and the model (sinusoidal or mixed linear-sinusoidal).","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"Sin3Problem\nSin4Problem\nMixedLinSin4Problem\nMixedLinSin5Problem","category":"page"},{"location":"reference/#SinusoidalRegressions.Sin3Problem","page":"Reference","title":"SinusoidalRegressions.Sin3Problem","text":"Sin3Problem(X, Y, f , [DC, Q, I, lb, ub]) <: SRProblem\n\nDefine a three-parameter sinusoidal regression problem.\n\nThe data is fit to the model f(x DC Q I) = DC + Qsin(2πfx) + Icos(2πfx). The sampling instants are given by X, and the samples by Y. The frequency f (in Hz) is assumed to be known exactly.\n\nWhen using a fitting algorithm that accepts initial parameter estimates, these may be given by the optional keyword arguments DC, Q and I (default missing). Lower and upper bounds may be specified in lb and ub, which must be vectors of length 3.\n\nSee also: Sin4Problem\n\n\n\n\n\n","category":"type"},{"location":"reference/#SinusoidalRegressions.Sin4Problem","page":"Reference","title":"SinusoidalRegressions.Sin4Problem","text":"Sin4Problem(X, Y ; [f, DC, Q, I, lb, ub]) <: SRProblem\n\nDefine a four-parameter sinusoidal regression problem.\n\nThe data is fit to the model f(x f DC Q I) = DC + Qsin(2πfx) + Icos(2πfx). The sampling instants are given by X, and the samples by Y.\n\nWhen using a fitting algorithm that accepts initial parameter estimates, these may be given by the optional keyword arguments f, DC, Q and I (default missing). Lower and upper bounds may be specified in lb and ub, which must be vectors of length 4.\n\nSee also: Sin3Problem\n\n\n\n\n\n","category":"type"},{"location":"reference/#SinusoidalRegressions.MixedLinSin4Problem","page":"Reference","title":"SinusoidalRegressions.MixedLinSin4Problem","text":"MixedLinSin4Problem(X, Y, f ; [DC, Q, I, m, lb, ub]) <: SRProblem\n\nDefine a four-parameter mixed linear-sinusoidal regression problem.\n\nThe data is fit to the model f(x DC Q I m) = DC + Qsin(2πfx) + Icos(2πfx) + mx. The sampling instants are given by X, and the samples by Y. The frequency f (in Hz) is assumed to be known exactly.\n\nWhen using a fitting algorithm that accepts initial parameter estimates, these may be given by the optional keyword arguments DC, Q I and m (default missing). Lower and upper bounds may be specified in lb and ub, which must be vectors of length 4.\n\nSee also: MixedLinSin5Problem\n\n\n\n\n\n","category":"type"},{"location":"reference/#SinusoidalRegressions.MixedLinSin5Problem","page":"Reference","title":"SinusoidalRegressions.MixedLinSin5Problem","text":"MixedLinSin5Problem(X, Y ; [f, DC, Q, I, m, lb, ub]) <: SRProblem\n\nDefine a five-parameter mixed linear-sinusoidal regression problem.\n\nThe data is fit to the model f(x  f DC Q I m) = DC + Qsin(2πfx) + Icos(2πfx) + mx. The sampling instants are given by X, and the samples by Y.\n\nWhen using a fitting algorithm that accepts initial parameter estimates, these may be given by the optional keyword arguments f, DC, Q I and m (default missing). Lower and upper bounds may be specified in lb and ub, which must be vectors of length 5.\n\nSee also: MixedLinSin4Problem\n\n\n\n\n\n","category":"type"},{"location":"reference/#Problem-Algorithm-matrix","page":"Reference","title":"Problem-Algorithm matrix","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"The following table shows which algorithms can solve which sinusoidal regression problems:","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":" IEEE1057 IntegralEquations LevMar Liang\nSin3Problem ✓  ✓ \nSin4Problem ✓ ✓ ✓ ✓\nMixedLinearSin4Problem  ✓ ✓ \nMixedLinearSin5Problem  ✓ ✓ ","category":"page"},{"location":"reference/#Sinusoidal-parameters","page":"Reference","title":"Sinusoidal parameters","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"SinModel\nSinModel(::Any, ::Any, ::Any, ::Any)\nSinModel(; ::Any, ::Any, ::Any, ::Any)\nSinModel(::Any)\nMixedLinSinModel\nMixedLinSinModel(::Any, ::Any, ::Any, ::Any, ::Any)\nMixedLinSinModel(; ::Any, ::Any, ::Any, ::Any, ::Any)\nMixedLinSinModel(::Any)\n#SinusoidalRegressions.GenSinModel\n#SinusoidalRegressions.DampedSinModel","category":"page"},{"location":"reference/#SinusoidalRegressions.SinModel","page":"Reference","title":"SinusoidalRegressions.SinModel","text":"SinModel{T <: Real} <: SRModel\n\nParameters f, DC, Q and I of the sinusoidal model s(x) = DC + Icos(2πfx) + Qsin(2πfx).\n\nSee also: MixedLinSinModel.\n\n\n\n\n\n","category":"type"},{"location":"reference/#SinusoidalRegressions.SinModel-NTuple{4, Any}","page":"Reference","title":"SinusoidalRegressions.SinModel","text":"SinModel{T}(f, DC, Q, I)\n\nConstruct a sinusoidal model with the given parameters.\n\nTo express the model as s(x) = Mcos(2πfx + θ), use the torect function.\n\nExamples\n\njulia> SinModel(10, 1, -0.5, 1.2)\nSinusoidal parameters SinModel{Float64}:\n  Frequency (Hz)      : 10.0\n  DC                  : 1.0\n  Sine amplitude (Q)  : -0.5\n  Cosine amplitude (I): 1.2\n\njulia> SinModel(1, 0, torect(1, -π/2)...)  # A pure sine\nSinusoidal parameters SinModel{Float64}:\n  Frequency (Hz)      : 1.0\n  DC                  : 0.0\n  Sine amplitude (Q)  : 1.0\n  Cosine amplitude (I): 0.0\n\n\n\n\n\n","category":"method"},{"location":"reference/#SinusoidalRegressions.SinModel-Tuple{}","page":"Reference","title":"SinusoidalRegressions.SinModel","text":"SinModel{T}(; f, DC, Q, I)\n\nConstruct a SinModel{T} specifying each parameter by name.\n\nExample\n\njulia> SinModel(DC = 1, Q = -0.5, I = 1.2, f = 10)\nSinusoidal parameters SinModel{Float64}:\n  Frequency (Hz)      : 10.0\n  DC                  : 1.0\n  Sine amplitude (Q)  : -0.5\n  Cosine amplitude (I): 1.2\n\n\n\n\n\n","category":"method"},{"location":"reference/#SinusoidalRegressions.SinModel-Tuple{Any}","page":"Reference","title":"SinusoidalRegressions.SinModel","text":"(P::SinModel)(t)\n\nEvaluate the sinusoidal function specified by the parameters P at the values given by t, which may be a scalar or a collection.\n\nExample\n\njulia> P = SinModel(DC = 1, Q = -0.5, I = 1.2, f = 10)\njulia> t = range(0, 0.7, length = 5)\njulia> P(t)\n5-element Vector{Float64}:\n  2.2\n  1.4999999999999996\n -0.2000000000000004\n  0.49999999999999944\n  2.200000000000001\n\n\n\n\n\n","category":"method"},{"location":"reference/#SinusoidalRegressions.MixedLinSinModel","page":"Reference","title":"SinusoidalRegressions.MixedLinSinModel","text":"MixedLinSinModel{T <: Real} <: SRModel\n\nParameters f, DC, Q, I and m of the sinusoidal function s(x) = DC + mx + Icos(2πfx) + Qsin(2πfx).\n\nSee also: SinModel.\n\n\n\n\n\n","category":"type"},{"location":"reference/#SinusoidalRegressions.MixedLinSinModel-NTuple{5, Any}","page":"Reference","title":"SinusoidalRegressions.MixedLinSinModel","text":"MixedLinSinModel{T}(f, DC, Q, I, m) <: SRModel\n\nConstruct a MixedLinSinModel{T} with the given parameters, promoting to a common type T if necessary.\n\nExample\n\njulia> MixedLinSinModel(10, 0, -1.2, 0.4, 2.1)\nMixed Linear-Sinusoidal parameters MixedLinSinModel{Float64}:\n  Frequency (Hz)       : 10.0\n  DC                   : 0.0\n  Sine amplitude (Q)   : -1.2\n  Cosine amplitude (I) : 0.4\n  Linear term (m)      : 2.1\n\n\n\n\n\n","category":"method"},{"location":"reference/#SinusoidalRegressions.MixedLinSinModel-Tuple{}","page":"Reference","title":"SinusoidalRegressions.MixedLinSinModel","text":"MixedLinSinModel(; f, DC, Q, I, m)\n\nConstruct a MixedLinSinModel{T} specifying each parameter by name.\n\nExample\n\njulia> MixedLinSinModel(f = 10, DC = 0, m = 2.1, Q= -1.2, I = 0.4)\nMixed Linear-Sinusoidal parameters MixedLinSinModel{Float64}:\n  Frequency (Hz)       : 10.0\n  DC                   : 0.0\n  Sine amplitude (Q)   : -1.2\n  Cosine amplitude (I) : 0.4\n  Linear term (m)      : 2.1\n\n\n\n\n\n","category":"method"},{"location":"reference/#SinusoidalRegressions.MixedLinSinModel-Tuple{Any}","page":"Reference","title":"SinusoidalRegressions.MixedLinSinModel","text":"(P::MixedLinSinModel)(t)\n\nEvaluate the mixed linear-sinusoidal function specified by the parameters P at the values given by t, which may be a scalar or a collection.\n\nExample\n\njulia> P = MixedLinSinModel(f = 10, DC = 0, m = 2.1, Q= -1.2, I = 0.4)\njulia> t = range(0, 0.7, length = 5)\njulia> P(t)\n5-element Vector{Float64}:\n  0.4\n  1.5674999999999997\n  0.3349999999999989\n -0.09750000000000014\n  1.870000000000002\n\n\n\n\n\n","category":"method"},{"location":"reference/#Error-measurement","page":"Reference","title":"Error measurement","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"Functions to easily compare a calculated fit to actual data, using root mean-square errors, or mean absolute errors.","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"rmse\nmae","category":"page"},{"location":"reference/#SinusoidalRegressions.rmse","page":"Reference","title":"SinusoidalRegressions.rmse","text":"rmse(fit::T, exact::T, x) where {T <: SRModel}\n\nCalculate the root mean-square error between fit and exact sampled at collection x.\n\nSee also: mae\n\n\n\n\n\nrmse(fit::T, samples, x) where {T <: SRModel}\n\nCalculate the root mean-square error between fit and the samples taken at x.\n\nSee also: mae\n\n\n\n\n\n","category":"function"},{"location":"reference/#SinusoidalRegressions.mae","page":"Reference","title":"SinusoidalRegressions.mae","text":"mae(fit::T, exact::T, x) where {T <: SRModel}\n\nCalculate the mean absolute error between fit and exact sampled at collection x.\n\nSee also: rmse\n\n\n\n\n\n","category":"function"},{"location":"reference/#Plotting","page":"Reference","title":"Plotting","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"This package provides recipes for Plots.jl. This makes it very easy to plot data and the calculated fit.","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"There are two recipes included: plotting one fit, and plotting data and up to two fits.","category":"page"},{"location":"reference/#Plotting-a-fit","page":"Reference","title":"Plotting a fit","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"plot(X, fit::T, ; fitlabel = \"\") where {T <: SinusoidalFunctionParameters}","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"Plot the model with parameters given by fit at the points specified in collection X. The optional keyword argument fitlabel controls the label (legend) of the plot.","category":"page"},{"location":"reference/#Example","page":"Reference","title":"Example","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"using SinusoidalRegressions\nusing Random: seed! # hide\nusing Plots # hide\nseed!(5678) # hide\nX = range(0, 1, length = 100)\nY = 2 .+ 3cos.(2*pi*5*X) .- 0.2sin.(2*pi*5*X) .+ 0.1*randn(100)\nfit = sinfit(Sin3Problem(X, Y, 5), IEEE1057())\nplot(X, fit, fitlabel = \"example\")","category":"page"},{"location":"reference/#Plotting-data-and-one-or-two-different-fits","page":"Reference","title":"Plotting data and one or two different fits","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"plot(X, Y, fit::T ; exact :: Union{T, Nothing} = nothing,\n                    samples    = 100,\n                    fitlabel   = \"fit\",\n                    datalabel  = \"data\",\n                    exactlabel = \"exact\") where {T <: SinusoidalFunctionParameters}","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"Plot the data Y and the model with parameters given by fit evaluated at the points specified in the collection X. The following keyword arguments are supported (with default values in parenthesis):","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"exact::T = nothing: add one more model to the plot. This allows plotting the exact function, the data and the fit in a single plot.\nsamples::Int = 100: fit and exact are evaluated for range(first(X), last(X), length = samples).\nfitlabel::String = \"fit\": the label (legend) for the fit plot.\ndatalabel::String = \"data\": the label for the data plot.\nexactlabel::String = \"exact\": the label for the exact plot.","category":"page"},{"location":"reference/#Example-2","page":"Reference","title":"Example","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"X = range(0, 1, length = 20)\nexact = SinModel(5, 2, -0.2, 3)\nY = exact.(X) .+ 0.3*randn(20)\nfit = sinfit(Sin4Problem(X, Y), IntegralEquations())\nplot(X, Y, fit, exact = exact,\n     datalabel = \"measurements\",\n     fitlabel = \"NLS\",\n     exactlabel = \"true\")","category":"page"},{"location":"reference/#Abstract-types","page":"Reference","title":"Abstract types","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"SRModel\nSRAlgorithm\nSRProblem","category":"page"},{"location":"reference/#SinusoidalRegressions.SRModel","page":"Reference","title":"SinusoidalRegressions.SRModel","text":"SRModel\n\nSupported models types are subtypes of the abstract type SRModel.\n\nSupertype for the parameters of the different kinds of sinusoidal models supported by SinusoidalRegressions.\n\nSee also: SinModel, MixedLinSinModel\n\n\n\n\n\n","category":"type"},{"location":"reference/#SinusoidalRegressions.SRAlgorithm","page":"Reference","title":"SinusoidalRegressions.SRAlgorithm","text":"SRAlgorithm\n\nSupported algorithm types are subtypes of the abstract type SRAlgorithm.\n\n\n\n\n\n","category":"type"},{"location":"reference/#SinusoidalRegressions.SRProblem","page":"Reference","title":"SinusoidalRegressions.SRProblem","text":"SRProblem\n\nSupported problem types are subtypes of the abstract type SRProblem.\n\n\n\n\n\n","category":"type"},{"location":"#Introduction","page":"Introduction","title":"Introduction","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"SinusoidalRegressions.jl provides a set of functions for conveniently fitting noisy data to a variety of sinusoidal models, with or without initial estimates of the parameters.","category":"page"},{"location":"#Features","page":"Introduction","title":"Features","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"This package supports five sinusoidal models:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"3-parameter sinusoidal, where the frequency f is known exactly:\ns_s(x textrmDC I Q) = textrmDC + Qsin(2πfx) + Icos(2πfx)\n4-parameter sinusoidal, where the frequency f is unknown:\ns_s(x f textrmDC I Q) = textrmDC + Qsin(2πfx) + Icos(2πfx)\nMixed linear-sinusoidal:\ns_mls(x f textrmDC I Q m) = textrmDC + mx + Qsin(2πfx) + Icos(2πfx)\n(Not yet implemented) General sinusoidal with unknown coefficients λ_1 λ_2 ldots λ_m, and known functions g_1(x) g_2(x) ldots g_m(x):\ns_g(x f I Q λ_1 ldots λ_n) = Qsin(2πfx) + Icos(2πfx) + λ_1g_1(x) + ldots + λ_mg_m(x)\n(Not yet implemented) Damped sinusoidal:\ns_d(x f I Q α) = exp(αx) ( Qsin(2πfx) + Icos(2πfx) )","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"note: A note on the frequency\nThe frequency f is assumed to be expressed in hertz throughout.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"note: Notation\nIn the model s(x θ_1 θ_2 ldots θ_n), x is the independent variable and θ_i, i = 1 ldots n are the unkown parameters.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Four types of sinusoidal fitting algorithms are provided:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"IEEE 1057 3-parameter and 4-parameter algorithms[1]. These are able to fit only the sinusoidal model s_s(x). The 4-parameter version requires a very close estimate of the frequency f and dense sampling of several periods of the sinusoid.\nThe algorithms proposed by J. Jacquelin, based on the idea of finding an integral equation whose solution is the desired sinusoidal model[2]. This integral equation can be solved using linear least-squares. These algorithms have several benefits:\nThey are non-iterative.\nThey do not require initial estimates of any of the model's parameters.\nThey often perform quite well, but may also be used to calculate a good initial guess for the more powerful non-linear methods described below.\nThe non-linear fitting function curve_fit from the package LsqFit. This function uses the Levenberg-Marquardt algorithm[3][4][5] and is quite powerful, but it requires an initial estimate of the parameters. SinusoidalRegressions.jl \"wraps\" curve_fit, automatically defining the correct model and calculating initial parameter estimates (using IEEE 1057 or Jacquelin's algorithms, as appropriate) if none are provided by the user.\nThe algorithm proposed by Liang et al[6], designed for the case where only a fraction of a period  of a sinusoid is sampled.","category":"page"},{"location":"#Installation","page":"Introduction","title":"Installation","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"This package is in Julia's general registry. It can be installed by running","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"import Pkg; Pkg.add(\"SinusoidalRegressions\")","category":"page"},{"location":"#Roadmap-and-Contributions","page":"Introduction","title":"Roadmap and Contributions","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"The following features are on the roadmap towards version 1.0:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Implement Jacquelin's algorithms for damped and general sinusoids.\nEnhance the front-end to curve_fit by allowing some paramters to be declared as known a priori, and  fitting only the remaining parameters (some progress done in v0.2).\nFine-tune the API (v0.2 should be close to final).\nImplement other algorithms and add support for other models.\nImprove tests.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Contributions, feature requests, bug reports and suggestions are welcome; please use the issue tracker on github, or open a discussion on the Julia Discourse forum or on Zulip.","category":"page"},{"location":"#Tutorial","page":"Introduction","title":"Tutorial","text":"","category":"section"},{"location":"#Fitting-experimental-data","page":"Introduction","title":"Fitting experimental data","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Fitting data using this package requires three steps:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Define a regression problem. The problem encapsulates all known data: the sampling points and data at a minimum, and possibly also the frequency. Initial estimates and bounds are also part of the problem definition.\nSpecify and possibly configure an algorithm to solve the problem.\nRun the sinfit function on the problem with the chosen algorithm. This function returns the estimated parameters in a struct of the appropriate type.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"After the data is fit, it may be easily plotted, and its RMSE and MAE may be calculated.","category":"page"},{"location":"#Example-1","page":"Introduction","title":"Example 1","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"As a first example, let us fit noisy data to a mixed linear-sinusoidal model using Jacquelin's integral equation algorithm. The model is","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"s(x  f textrmDC Q I m) = textrmDC + mx + Qsin(2πfx) + Icos(2πfx)","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"with parameters f (the frequency is unknown), textrmDC, Q, I and m.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Our tasks are: define an \"exact\" model and generate noisy samples from it, fit the noisy samples, determine the error (a measure of the difference between the exact model and the fit), and plot the fit. First we need to learn about defining a model.","category":"page"},{"location":"#Model-types","page":"Introduction","title":"Model types","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"This package includes several types used to store the parameters of the different supported models. All model types are a subtype of the abstract type SRModel.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"SinModel for representing sinusoidal models s_s(x).\nMixedLinSinModel for representing mixed linear-sinusoidal models s_mls(x).\nGenSinModel for representing general sinusoidal models s_g(x) (not yet implemented).\nDampedSinModel for representing damped sinusoidal models s_d(x) (not yet implemented).","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Instances of these types are also function types (functors), making it easy to evaluate the model at any point (or collection of points). A plot recipe is also provided. We will use both of these features below.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Since we're assuming a mixed linear-sinusoidal model, we'll use the type MixedLinSinModel.","category":"page"},{"location":"#Generating-the-exact-and-noisy-data","page":"Introduction","title":"Generating the exact and noisy data","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"We will first generate the \"exact\" or \"true\" data, and then add noise.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"The exact parameters in this example are f = 41, textrmDC = 02, m = 1, Q = -075, and I = 08. We define the model as follows:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"using SinusoidalRegressions\nparam_exact = MixedLinSinModel(f = 4.1, DC = 0.2, m = 1, Q = -0.75, I = 0.8)","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"We now genereate 40 exact data points with a sampling rate of 40 Hz.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"x = range(0, length = 40, step = 1/40)\ndata_exact = param_exact(x)\nnothing # hide","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"And finally, we add gaussian noise to the data:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"using Random: seed!\nseed!(6778899)\n\ndata = data_exact .+ 0.2*randn(40)  # noisy data\nnothing # hide","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Alternatively, the data could have been generated directly, as in:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"data_exact = 0.2 .+ m.*x .- 0.75*sin.(2*pi*4.1*x) .+ 0.8*cos.(2*pi*4.1*x)","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Now we need to define the problem.","category":"page"},{"location":"#Defining-the-problem","page":"Introduction","title":"Defining the problem","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"There are several types used to define the different problems that this package can handle. All are subtypes of the abstract type SRProblem.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Sin3Problem to specify a 3-parameter sinusoidal problem (frequency is known).\nSin4Problem to specify a 4-parameter sinusoidal problem (frequency is unknown).\nMixedLinSin4Problem for a mixed linear-sinusoidal problem with 4 parameters (the frequency is known).\nMixedLinSin5Problem for a mixed linear-sinusoidal problem with 5 parameters (the frequency is unknown).","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"In our example, the frequency is unknown, which means MixedLinSin5Problem is the appropriate type. The problem is simply defined as follows:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"problem = MixedLinSin5Problem(x, data)","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"All parameters are missing because, in this example, we assume we know nothing about the underlying model beyond the assumption that it is mixed linear-sinusoid; all we have is the data samples.","category":"page"},{"location":"#Specifying-an-algorithm","page":"Introduction","title":"Specifying an algorithm","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Now, we need to choose and instantiate a solution algorithm, from the following list. All algorithms are subytpes of the abstract type SRAlgorithm.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"IEEE1057 to specify IEEE 1057.\nIntegralEquations to select Jacquelin's integral equations methods.\nLevMar to use Levenberg-Marquardt via curve_fit\nLiang to use Liang's algorithm.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Some of these algorithms can take configuration parameters. In our case, we want to use the integral equations method, which does not require any configuration:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"algorithm = IntegralEquations()","category":"page"},{"location":"#Fitting-and-error-measurement","page":"Introduction","title":"Fitting and error measurement","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"We are ready to calculate the fit:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"fit = sinfit(problem, algorithm)","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Note that sinfit returns a value of type MixedLinSinModel, which contains the estimated parameters in its fields.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"We calculate the fit's root mean-square error and mean absolute error:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"rmse(fit, param_exact, x)","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"mae(fit, param_exact, x)","category":"page"},{"location":"#Plotting","page":"Introduction","title":"Plotting","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"We can plot the measured data along with the fit:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"using Plots\nplot(x, data, fit)","category":"page"},{"location":"#Improving-the-fit-with-non-linear-least-squares","page":"Introduction","title":"Improving the fit with non-linear least squares","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"We may try to improve upon this fit by using Levenberg-Marquardt with the parameters estimated above as initial parameters. We can do so as follows:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"(; f, DC, Q, I, m) = fit # transfer the fit to a new problem instance\nproblem_levmar = MixedLinSin5Problem(x, data; f, DC, Q, I, m)","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Note that now the problem includes initial estimates of the paramaters (except for the bounds). If these are not provided, then sinfit (when using LevMar()) would have used the integral equations algorithm to calculate them automatically. It is also possible to give estimates of only some of the paramaters.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Now we can fit the data:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"fit_levmar = sinfit(problem_levmar, LevMar())","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"We can re-evaluate the error:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"rmse(fit_levmar, param_exact, x)","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"mae(fit_levmar, param_exact, x)","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"As expected, this second fit has a smaller error. Plotting the data, the fit, and the exact function for comparison:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"plot(x, data, fit_levmar, exact = param_exact)","category":"page"},{"location":"#Example-2:-A-more-difficult-scenario","page":"Introduction","title":"Example 2: A more difficult scenario","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Let us fit the same model as above, with fewer data points, more noise and non-equidistant samples.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"x = sort(rand(20))\ndata_exact = param_exact(x)\ndata = data_exact .+ 0.3*randn(20)\nproblem = MixedLinSin5Problem(x, data)\nfit = sinfit(problem, IntegralEquations())","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Error for Jacquelin's algorithm:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"rmse(fit, param_exact, x)","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"mae(fit, param_exact, x)","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"As expected, we see larger errors than in the more benign scenario above. Let us improve the fit using non-linear least-squares. Note that the Levenberg-Marqvardt algorithm requires initial estimates of the parameters, which we have not provided. In this case, sinfit will calculate the initial estimates \"behind the scenes\" using IntegralEquations().","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"fit_nls = sinfit(problem, LevMar())","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Error for LsqFit.curve_fit:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"rmse(fit_nls, param_exact, x)","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"mae(fit_nls, param_exact, x)","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"We see that LsqFit.curve_fit was able to improve the fit significantly. Plotting the data, the fit and the exact function:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"plot(x, data, fit_nls, exact = param_exact)","category":"page"},{"location":"#References","page":"Introduction","title":"References","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"[1]: IEEE, \"IEEE Standard for Digitizing Waveform Recorders\", 2018.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"[2]: Jacquelin J., Régressions et Equations Intégrales, 2014, (online) https://fr.scribd.com/doc/14674814/Regressions-et-equations-integrales.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"[3]: Levenberg, K., \"A Method for the Solution of Certain Non-Linear Problems in Least Squares\", Quarterly of Applied Mathematics, 2 (2), 1944. doi:10.1090/qam/10666.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"[4]: Marquardt, D., \"An Algorithm for Least-Squares Estimation of Nonlinear Parameters\", SIAM Journal on Applied Mathematics, 11 (2), 1944. doi:10.1137/0111030.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"[5]: LsqFit.jl User Manual, (online) https://julianlsolvers.github.io/LsqFit.jl/latest/","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"[6]: Liang et al, \"Fitting Algorithm of Sine Wave with Partial Period Waveforms and Non-Uniform Sampling Based on Least-Square Method.\" Journal of Physics: Conference Series 1149.1 (2018)ProQuest. Web. 17 Apr. 2023.","category":"page"}]
}
